steps:
  # create the artifacts directory for portage and allow it to write to the directory 
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'mkdir -p /workspace/artifacts && chmod 777 /workspace/artifacts | ls -la']
  
  # Tell me about yourself cloud-builders/docker
  - name: 'gcr.io/cloud-builders/docker'
    args: ['context', 'ls']

  # Create a file with the secret for use in the next step
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo $$DEPLOY_UI_WEBHOOK_AUTH_HEADER_SECRET > /workspace/auth_token.txt
    secretEnv: ['DEPLOY_UI_WEBHOOK_AUTH_HEADER_SECRET']

  # Cloudbuild checks out a commit behind the scenes resulting in a headless branch. We need to set the branch name to
  # the provided substitution variable for portage to properly collect and send the build artifacts
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ ! -z "$BRANCH_NAME" ]; then
          echo "Switching to branch $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
        fi

  # Build the container image with portage image, scan for vulnerabilities, and push artifacts to Belay
  # The auth token is passed in as an environment variable via a file read due to running portage from docker
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        AUTH_TOKEN=$(cat /workspace/auth_token.txt) && \
        docker run --user root \
        -v /var/run/docker.sock:/var/run/docker.sock -v /workspace:/app:rw \
        -e DEPLOY_UI_WEBHOOK_AUTH_HEADER="$${AUTH_TOKEN}" \
        --entrypoint sh ghcr.io/easy-up/portage:d3c365f6 \
        -c "echo \"Current User: $$(whoami)\" && \
            echo \"Current Dir: $$(pwd)\" && \
            echo \"Home Dir: $${HOME}\" && \
            echo \"Current Branch: $$(git rev-parse --abbrev-ref HEAD)\" && \
            docker info && \
            git config --global --add safe.directory /app && \
            portage run all -v"
    secretEnv:
      ['DEPLOY_UI_WEBHOOK_AUTH_HEADER_SECRET']

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-west1-docker.pkg.dev/holomua-demo/gcp-demo-registry/${_SERVICE}:latest']

images:
  - 'us-west1-docker.pkg.dev/holomua-demo/gcp-demo-registry/${_SERVICE}'

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/gcp-demo-deploy-ui-webhook-auth-header/versions/latest
      env: 'DEPLOY_UI_WEBHOOK_AUTH_HEADER_SECRET'

options:
  logging: CLOUD_LOGGING_ONLY
